generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Statut {
  en_attente
  valide
  refuse
}

enum PostedStatut {
  actif
  inactif
}

enum RentalType {
  mensuel
  courte
  achat
}

enum ListingType {
  Maison
  Appartement
  Grange
  Chambre_d_hotes
  Bateau
  Cabane
  Caravane_ou_camping_car
  Casa_particular
  Chateau
  Maison_troglodyte
  Conteneur_maritime
  Maison_cycladique
}

enum OccupationType {
  Un_logement_entier
  Une_chambre
}

enum PhotoStatus {
  accepte
  refuse
}

enum ReservationStatus {
  pending
  confirmed
  cancelled
}

enum PaiementEtat {
  payer
  non_payer
  partiel
}

enum TransactionType {
  mobile_money
  espÃ¨ces
  taptap_send
  cb
}

enum TransactionStatus {
  en_attente
  rÃ©ussi
  Ã©chouÃ©
}

enum UserRole {
  user
  admin
}

// ðŸ†• Enum pour la messagerie
enum ConversationType {
  general // Conversation gÃ©nÃ©rale
  listing // Ã€ propos d'un logement
  reservation // Ã€ propos d'une rÃ©servation
}

model UserTermsAcceptance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  accepted  Boolean
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Availability {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId   String   @db.ObjectId
  date        DateTime
  isAvailable Boolean  @default(true)
  customPrice Int?

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([listingId, date])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  numberPhone    String?   @unique
  hashedPassword String?
  image          String?
  emailVerified  DateTime?
  favoriteIds    String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           UserRole  @default(user)

  // Relations existantes
  accounts        Account[]
  listings        Listing[]
  reservations    Reservation[]
  termsAcceptance UserTermsAcceptance?

  // ðŸ†• Relations de messagerie
  conversationsAsUser1 Conversation[] @relation("ConversationUser1")
  conversationsAsUser2 Conversation[] @relation("ConversationUser2")
  sentMessages         Message[]
}

model Listing {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String

  createdAt     DateTime @default(now())
  category      String
  roomCount     Int
  bathroomCount Int
  toilets       Int      @default(0)
  guestCount    Int
  locationValue String
  userId        String   @db.ObjectId
  price         Int

  quater String?

  statut                  String  @default("en_attente")
  posted_statut           String  @default("actif")
  has_living_room         Boolean @default(false)
  is_furnished            Boolean @default(false)
  has_garden              Boolean @default(false)
  has_balcony             Boolean @default(false)
  has_terrace             Boolean @default(false)
  has_pool                Boolean @default(false)
  rental_type             String  @default("mensuel")
  has_wifi                Boolean @default(false)
  has_parking             Boolean @default(false)
  has_kitchen             Boolean @default(false)
  has_tv                  Boolean @default(false)
  has_air_conditioning    Boolean @default(false)
  has_washing_machin      Boolean @default(false)
  has_dryer               Boolean @default(false)
  has_iron                Boolean @default(false)
  has_hair_dryer          Boolean @default(false)
  has_fridge              Boolean @default(false)
  has_dishwasher          Boolean @default(false)
  has_oven                Boolean @default(false)
  has_fan                 Boolean @default(false)
  has_elevator            Boolean @default(false)
  has_camera_surveillance Boolean @default(false)
  has_security            Boolean @default(false)
  has_gym                 Boolean @default(false)
  price_per_month         Int     @default(0)
  listing_type            String?
  occupation_type         String?
  price_for_sale          Int?
  photo                   String?
  motif                   String?
  city                    String?
  is_host                 Boolean @default(false)
  prix_viste              Int     @default(5000)

  // Relations existantes
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations   Reservation[]
  images         ListingImage[]
  availabilities Availability[]

  // ðŸ†• Relation de messagerie
  conversations Conversation[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Reservation {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  listingId String @db.ObjectId

  startDate        DateTime?
  endDate          DateTime?
  totalPrice       Int
  message          String?
  createdAt        DateTime        @default(now())
  type_transaction TransactionType

  status              ReservationStatus @default(pending)
  motif               String?
  etat                PaiementEtat      @default(non_payer)
  rental_type         RentalType        @default(mensuel)
  check_in_hours      DateTime?
  date_visite         DateTime?
  heure_visite        DateTime?
  code_reservation    String?           @unique
  nom_mobile_money    String?
  numero_mobile_money String?

  // Relations existantes
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing      Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  // ðŸ†• Relation de messagerie
  conversations Conversation[]
}

model Transaction {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  reservationId         String            @db.ObjectId
  type_transaction      TransactionType
  nom_mobile_money      String?
  numero_mobile_money   String?
  reference_transaction String?           @unique
  montant               Int
  devise                String            @default("FCFA")
  statut                TransactionStatus @default(en_attente)
  date_transaction      DateTime          @default(now())
  etat                  PaiementEtat      @default(non_payer)

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

model ListingImage {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  listingId String @db.ObjectId

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

// ðŸ†• NOUVEAUX MODÃˆLES DE MESSAGERIE

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Les 2 participants
  user1Id String @db.ObjectId
  user2Id String @db.ObjectId

  // Type et contexte
  type          ConversationType @default(general)
  listingId     String?          @db.ObjectId
  reservationId String?          @db.ObjectId

  // MÃ©tadonnÃ©es
  lastMessageAt   DateTime?
  lastMessageText String?

  // Relations
  user1       User         @relation("ConversationUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2       User         @relation("ConversationUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  listing     Listing?     @relation(fields: [listingId], references: [id], onDelete: SetNull)
  reservation Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull)
  messages    Message[]

  @@index([user1Id, user2Id])
  @@index([listingId])
  @@index([reservationId])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  content        String
  senderId       String  @db.ObjectId
  conversationId String  @db.ObjectId
  isRead         Boolean @default(false)

  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
}
